<link:kernel32.lib>

MEMORY {

	$handle : &0->QWORD(0);

	INIT {

		&2->STACK_GROW(32);

		&2->CALL($['GetProcessHeap']);
		&2->MOV_Q(.MEMORY->$handle, %10);

		&2->STACK_SHRINK(32);

	}

	NEW(|$addr, &d? : &0) ? &d {
	
		&d->QWORD(0);
	
	}

	ALLOC(%addr|$addr, %size|$size|#size, %handle|$handle?:$handle, &c ?: &4) ? &c {
	
		&c->MOV_Q(%11, %handle|$handle);
		&c->MOV_D(%12, 0);
		&c->MOV_D(%0, %size|$size|#size);

		&c->STACK_GROW(32);

		&c->CALL($['HeapAlloc']);

		&c->MOV_Q(%addr|$addr, %10);

		&c->STACK_SHRINK(32);
	
	}

	RESIZE(%addr|$addr, %size|$size|#size, %handle|$handle?:$handle, &c ?: &4) ? &c {
	
		&c->MOV_Q(%11, %handle|$handle);
		&c->MOV_D(%12, 0);
		&c->MOV_Q(%0, %addr|$addr);
		&c->MOV_D(%1, %size|$size|#size);

		&c->STACK_GROW(32);

		&c->CALL($['HeapReAlloc']);

		&c->MOV_Q(%addr|$addr, %10);

		&c->STACK_SHRINK(32);
	
	}

	FREE(%addr|$addr, %handle|$handle?:$handle, &c ?: &4) ? &c {
	
		&c->MOV_Q(%11, %handle|$handle);
		&c->MOV_D(%12, 0);
		&c->MOV_Q(%0, %addr|$addr);

		&c->STACK_GROW(32);

		&c->CALL($['HeapFree']);

		&c->STACK_SHRINK(32);
	
	}

}